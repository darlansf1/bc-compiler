options{}
PARSER_BEGIN(BCparser)
import java.io.*;

public class BCparser{
    public static void main(String[] args) throws ParseException, TokenMgrError{
        BCparser bcparser = new BCparser(System.in);
        try{
            bcparser.start();
            System.out.println("sucesso!");
        }catch (Exception e) {
            System.out.println("Nao sucesso");
        }
    }
}

PARSER_END(BCparser)

SKIP:
{
	" "
|	"\t"
| 	"\n"
}

TOKEN:
{
    <EOL: "\n" | "\r" | "\r\n" > |
    <PLUS: "+"> |
    <MINUS: "-"> |
    <DIV: "/"> |
    <MUL: "*"> |
    <MOD: "%">
}


/*Separadores e Agrupadores*/
TOKEN:
{
  <LPAR: "(">
 | <RPAR: ")">
|	<LBRACK: "{">
|	<RBRACK: "}">
|	<SEMICOLON: ";">
|	<COMMA: ",">
/*|	<QUOT: \"\" "> */
|	<LSQ_BRACK: "[">
|	<RSQ_BRACK: "]">
|	<DOT: ".">
|	<BANG: "!">
|	<GT: ">">
|	<LT: "<">
|	<ASSIGN_SYMBOL: "=">

}

/*Palavras reservadas e funcoes nativas*/
TOKEN:
{
  <IBASE: "ibase"> |
  <SCALE: "scale">
/*	|	<LAST: "last" | ".">*/
	|	<OBASE: "obase">
	|	<SQRT: "sqrt">
	|	<LENGTH: "length">
	|	<FUNC_S: "s">
	|	<FUNC_C: "c">
	|	<FUNC_E: "e">
	|	<FUNC_L: "l">
	|	<FUNC_A: "a">
	|	<FUNC_J: "j">
|	<IF: "if">
	|	<ELSE: "else">
	|	<WHILE: "while">
	|	<FOR: "for">
	|	<PRINT: "print">
	|	<DEFINE: "define">
	|	<AUTO: "auto">
	|	<BREAK: "break">
	|	<CONTINUE: "continue">
	|	<QUIT: "quit">
	|	<RETURN: "return">
}

/*Numeros, palavras e identificadores*/
TOKEN:
{
  <#DIGIT: ["0"-"9"] > |
  <LETTER: "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p"| "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "_">
|	<SYMBOL: " " | <BANG> /*| """*/  | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | <LT> | <ASSIGN_SYMBOL> | <GT>  | "[" | "]" | "^" | "{" | "|" | "}">
		
	|	<INTEGER: ("-" | "+")? (<DIGIT>)+>
	|	<REAL: ("-" | "+")? (<DIGIT>)+ "." (<DIGIT>)+>
/*|	<NUM: <INTEGER> | <REAL> >*/
|	<ALPHANUMERIC: <DIGIT> | <LETTER> >
|	<ID: <LETTER> (<ALPHANUMERIC>)*>
}


/****TMP TOKENS**/
TOKEN:
{
    <E7: "++"> 
}
void start():
{
  /*var locais*/
    int value;
}
{
   bc() <EOF>
}

void bc():
{ }
{ 
  (comando() | def_funcao())*
  
}

void comando():
{ }
{

  //<ID>{System.out.println("-> ID "); }
  E() //<E> 
  /*
  | <comando_composto> 
  | <IF> 
  | <WHILE> 
  | <FOR> 
  | <NULL> 
  | <BREAK> 
  | <CONTNUE>
  | <QUIT>
  | <PRINT>
  | <STRING>
  */

}

void def_funcao():
{ }
{
  <DEFINE> {System.out.println("->def funcao");}

}


/*<E>::= <E1> ( || <E1> )* */
void E():
{Token t;}
{
  E1() ( "||" E1())* 
  //{ System.out.println("->||");}

}

/*<E1>::= <E2> ( && <E2> )* */
void E1():
{}
{
  E2() ( "&&" E2())*

}

/*<E2>::= [ ! ] <E3> */
void E2():
{}
{
  (<BANG>)? E3()

}

/*<E3>
 ::= <E4> [ (== | <= | >= | != | < | > ) <E4> ]
*/
void E3():
{}
{
  E4() (("==" | "<=" | ">=" | "!=" | <LT> | <GT>) E4())?

}


/*<E4>
 ::= <E5> [ ( = | += | -= | *= | /= | %= | ^= ) <E4> ] 
 # ou <E5> | <E5> ( = | +=|-=|*=| /= | %= | ^= ) <E4> 
 */
void E4():
{}
{
  E5() ((<ASSIGN_SYMBOL> | "+=" | "-=" | "*=" | "/=" | "%=" | "^=") E4())?
} 

/*<E5>::= <E6> ( ( + | - ) <E6> )* */

void E5():
{}
{
  E6() ((<PLUS> | <MINUS>) E6() )*
} 


/*<E6>::= <E7> ( ( * | / | % ) <E7> )* */
void E6():
{}
{
  <E7> ( ("*" | "/"| "%") <E7>)*
} 


