 
options{DEBUG_PARSER = true;}
PARSER_BEGIN(BCparser)
import java.io.*;

public class BCparser{
    public static void main(String[] args) throws ParseException, TokenMgrError{
        BCparser bcparser = new BCparser(System.in);
        try{
            bcparser.start();
            System.out.println("Sucesso!");
        }catch (Exception e) {
            //System.out.println("Nao sucesso\n" + e.toString());
            System.out.println("Erro!\n");
        }
    }
}

PARSER_END(BCparser)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN:
{
    <EOL: "\\n" | "\\r" | "\\r\\n" > |
    <PLUS: "+"> |
    <MINUS: "-"> |
    <DIV: "/"> |
    <MUL: "*"> |
    <MOD: "%"> |
    <POWER: "^"> |
    <PLUSPLUS: "++"> |
    <MINUSMINUS: "--"> |
    <OR: "||"> |
    <AND: "&&"> |
    <NOT: "!"> |
    <MINUS_ASSIGN: "-="> |
    <PLUS_ASSIGN: "+="> |
    <DIV_ASSIGN: "/="> |
    <MUL_ASSIGN: "*="> |
    <MOD_ASSIGN: "%="> |
    <POWER_ASSIGN: "^="> |
    <GT: ">"> |
    <LT: "<"> |
    <GTE: ">="> |
    <LTE: "<="> |
    <EQUAL: "=="> |
    <DIFF: "!="> 
}


/*Separadores e Agrupadores*/
TOKEN:
{
  <LPAR: "(">
 | <RPAR: ")">
|	<LBRACK: "{">
|	<RBRACK: "}">
|	<SEMICOLON: ";">
|	<COMMA: ",">
|	<QUOT: "\""> 
|	<LSQ_BRACK: "[">
|	<RSQ_BRACK: "]">
|	<DOT: ".">
|	<ASSIGN_SYMBOL: "="> 
| 	<SEPARADOR: <SEMICOLON>|"\\n">
}


/*Palavras reservadas e funcoes nativas*/
TOKEN:
{
  <IBASE: "ibase"> |
  <SCALE: "scale">
	|	<LAST: "last" | <DOT>>
	|	<OBASE: "obase">
	|	<SQRT: "sqrt">
	|	<LENGTH: "length">
	|	<FUNC_S: "s">
	|	<FUNC_C: "c">
	|	<FUNC_E: "e">
	|	<FUNC_L: "l">
	|	<FUNC_A: "a">
	|	<FUNC_J: "j">
	|	<IF: "if">
	|	<ELSE: "else">
	|	<WHILE: "while">
	|	<FOR: "for">
	|	<PRINT: "print">
	|	<DEFINE: "define">
	|	<AUTO: "auto">
	|	<BREAK: "break">
	|	<CONTINUE: "continue">
	|	<QUIT: "quit">
	|	<RETURN: "return">
}

/*Numeros, palavras e identificadores*/
TOKEN:
{
  <#DIGIT: ["0"-"9"] > |
  <#LETTER: "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p"| "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "_"> |
  <#SYMBOL: " " | <NOT> | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | <LT> | <ASSIGN_SYMBOL> | <GT>  | "[" | "]" | "^" | "{" | "|" | "}"> | 
		
	<#INTEGER: ("-" | "+")? (<DIGIT>)+> |
	<#REAL: ("-" | "+")? (<DIGIT>)+ "." (<DIGIT>)+> |
	<NUM: <INTEGER> | <REAL> > |
	<#ALPHANUMERIC: <DIGIT> | <LETTER> > |
	< ID: <LETTER> (<ALPHANUMERIC> )* > |
	<STRING: <QUOT>(<ALPHANUMERIC>|<SYMBOL>|<EOL>)*<QUOT>>
}


void start():
{
  /*var locais*/
    int value;
}
{
   bc() <EOF>
}

void bc():
{ }
{ 
  ( comando() | def_funcao())+
  
}

void comando():
{ }
{

  //<ID>{System.out.println("-> ID "); }
  E() | 
  //TODO comando_composto gera recursao a esquerda
  /*comando_composto()*/ 
  IF_COMMAND() | 
  WHILE_COMMAND() |
  FOR_COMMAND() |
  NULL_COMMAND() | 
  BREAK_COMMAND() |
  CONTINUE_COMMAND() |
  QUIT_COMMAND() |
  PRINT_COMMAND() |
  STRING_COMMAND()

}


/*<comando_composto> ::= { <ListaComandos> } */
//TODO comando_composto gera recursao a esquerda
void comando_composto():
{}
{
  (ListaComandos())*
}


/*<ListaComandos> ::= <comando> (<separador> <comando>)* */
void ListaComandos():
{}
{
  comando() (<SEPARADOR> comando())*
}

/*<IF> ::= if ( <E> ) <comando> [ else <comando> ] */
void IF_COMMAND():
{}
{
  <IF> <LPAR> E() <RPAR> comando() (<ELSE> comando())?

}


/*<WHILE> ::= while ( <E> ) <comando> */
void WHILE_COMMAND():
{}
{
  <WHILE> <LPAR> E() <RPAR> comando()
}


/*<FOR> ::= for ( [<E>] ; [<E>] ; [<E>] ) <comando> */
void FOR_COMMAND():
{}
{
  <FOR> <LPAR> (E())? <SEMICOLON> (E())? <SEMICOLON> (E())? <RPAR> comando()
}


/*<NULL> ::= ; */
void NULL_COMMAND():
{}
{
  <SEMICOLON>
}


/*<BREAK> ::= break*/
void BREAK_COMMAND():
{}
{
  <BREAK>
}


/*<CONTINUE> ::= continue */
void CONTINUE_COMMAND():
{}
{
  <CONTINUE>
}


/*<QUIT> ::= quit*/
void QUIT_COMMAND():
{}
{
  <QUIT>
}


/*<PRINT> ::= print <ListaExpressões> */
void PRINT_COMMAND():
{}
{
  <PRINT> ListaExpressoes()
}

/*<STRING_COMMAND> ::= <STRING>*/
void STRING_COMMAND():
{}
{
  <STRING>
}



/*<ListaExpressões> ::= <E> ( , <E>)* */
void ListaExpressoes():
{}
{
  E() (<COMMA> E())*
}



/*<E>::= <E1> ( || <E1> )* */
void E():
{Token t;}
{
  E1() ( <OR> E1())* 
  //{ System.out.println("->||");}
}

/*<E1>::= <E2> ( && <E2> )* */
void E1():
{}
{
  E2() ( <AND> E2())*

}

/*<E2>::= [ ! ] <E3> */
void E2():
{}
{
  (<NOT>)? E3()

}

/*<E3>
 ::= <E4> [ (== | <= | >= | != | < | > ) <E4> ]
*/
void E3():
{}
{
  E4() ((<EQUAL> | <LTE> | <GTE> | <DIFF> | <LT> | <GT>) E4())?
}


/*<E4>
 ::= <E5> [ ( = | += | -= | *= | /= | %= | ^= ) <E4> ] 
 # ou <E5> | <E5> ( = | +=|-=|*=| /= | %= | ^= ) <E4> 
 */
void E4():
{}
{
  E5() ((<ASSIGN_SYMBOL> | <PLUS_ASSIGN> | <MINUS_ASSIGN> | <MUL_ASSIGN> | <DIV_ASSIGN> | <MOD_ASSIGN> | <POWER_ASSIGN>) E4())?
} 

/*<E5>::= <E6> ( ( + | - ) <E6> )* */

void E5():
{}
{ 
  E6() ((<PLUS> | <MINUS>) E6() )* 
      
} 


/*<E6>::= <E7> ( ( * | / | % ) <E7> )* */
void E6():
{}
{
  E7() ( (<MUL> | <DIV>| <MOD>) E7())*
} 


/*<E7>::= <E8> [ ^ <E7> ] */
void E7():
{}
{
  E8() ( <POWER> E7())?
} 

/*<E8> ::= [ - ] <E9> */
void E8():
{}
{
  ( <MINUS> )? E9()
}

/*<E9> ::= [ ++ | -- ] <E10> | <E10> [ ++ | -- ] */
//TODO: nao é LL1
void E9():
{}
{
  LOOKAHEAD(2)( <PLUSPLUS> | <MINUSMINUS>)? E10() | E10() ( <PLUSPLUS> | <MINUSMINUS>)?
  //( <PLUSPLUS> | <MINUSMINUS>)? E10()
}


/*<E10> ::= <NUM> | ( <E> ) | sqrt ( <E> ) | length ( <E> ) | scale ( <E> ) | <chamada_função> |
<ID> | <ID> [ <E> ] | ibase | obase | scale | last | . */
//TODO chamada_funcao
void E10():
{}
{
  <NUM> | <LPAR> E() <RPAR> | <SQRT> <LPAR> E() <RPAR> | <LENGTH> <LPAR> E() <RPAR> | <SCALE> <LPAR> E() <RPAR> |
      LOOKAHEAD(2) chamada_funcao() | <ID>| /*<ID> (E())? | */<IBASE> | <OBASE>  | <LAST>
}
 
 
/*<chamada_função> ::= <ID> ( [ <ListaExpressões> ] )*/
void chamada_funcao():
{}
{
  <ID> <LPAR> (ListaExpressoes())? <RPAR>
 
}


/*<definição de função> ::= define <ID> ( [ <ListaVar> ] ) { auto <ListaVar> <ListaComandos>
[ <RETORNO> ] } */
void def_funcao():
{}
{
  <DEFINE> <ID> <LPAR> (ListaVar())? <RPAR> <LBRACK> <AUTO> ListaVar() ListaComandos() (RETORNO())? <RBRACK>
  //<DEFINE> <ID> <LPAR> <RPAR> <LBRACK> <RBRACK>
  
}
 
 
/*<RETORNO> ::= return ( [<E>] ) | return [<E>] */
void RETORNO():
{ }
{
  <RETURN> (<LPAR> (E())? <RPAR> | (E())?)	
}

 
 /*<ListaVar> ::= <ID> [ [ ] ] ( , <ID> [ [ ] ])* */
void ListaVar():
{ }
{
  <ID> (<LBRACK> <RBRACK>)? ( <COMMA> <ID> (<LBRACK> <RBRACK>)? )*
}

 


