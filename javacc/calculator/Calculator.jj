options{}
PARSER_BEGIN(Calculator)
import java.io.*;

public class Calculator{
	public static void main(String[] args) throws ParseException, TokenMgrError{
		Calculator calc = new Calculator(System.in);
		try{
			calc.start();
			System.out.println("sucesso!");
		}catch (Exception e) {
			System.out.println("Nao sucesso");
		}
	}
}

PARSER_END(Calculator)

SKIP:
{
	" "
|	"\t"
}


/* Operadores */
TOKEN:
{
	<PLUS: "+" >
|	<MINUS: "-" >
|	<MUL: "*">
|	<DIV: "/">
}

TOKEN:
{
	<LPAR: "(">
|	<RPAR: ")">
}

TOKEN:
{
	<EOL: "\n" | "\r" | "\r\n" >
}

TOKEN:
{
	<#DIGIT: ["0"-"9"] >
|	<INTEGER: (<DIGIT>)+ >
}


/*
  	<start> ::= (<expr>)*
	<expr> 	::= <term> {(+|-) <term>}		
	<term> 	::= <factor> {(*|/) <factor>}
	<factor>::= (<expr>) | <num>
	<num> 	::= int 
*/
void start():
{/*var locais*/
	int value;
}
{
	( value=expr() <EOL> { System.out.println("> result: "+value); } )+ // se colocar * não dará erro p/ --3, --..-, ++..+ 
}

int expr():
{
	Token t;
	int t1, t2;
	Operation op=null;
	
	//System.out.println("<expr>");
}
{
	// <expr> 	::= <term> {(+|-) <term>}
    t1=term() ( 

       
				(
					t = <PLUS> {
                        System.out.printf("@(%d,%d)\tPLUS\t-\t%s\n", t.beginLine, t.beginColumn, t);
                        op = new Sum(); 
                        }

				| 	t=<MINUS> {
                     System.out.printf("@(%d,%d)\tMINUS\t-\t%s\n", t.beginLine, t.beginColumn, t);
                    op = new Sub(); 
                    }
				)
				 
				t2=term()		{
									t1 = op.calculate(t1, t2);
									//System.out.println("<TERM>" + t.beginLine + " " + t.beginColumn);
								}
			)*
	{ return t1; }
}

int term():
{ 
	Token t;
	int f1, f2; 
	Operation op=null; 
}
{
	//<term> 	::= <factor> {(*|/) <factor>}
	f1=factor() (
				(
					t = <MUL> { 
                        op = new Mul();
                        System.out.printf("@(%d,%d)\tMUL\t-\t%s\n", t.beginLine, t.beginColumn, t);
                    }
                        
				|	t = <DIV> { 
                    op = new Div();
                    System.out.printf("@(%d,%d)\tDIV\t-\t%s\n", t.beginLine, t.beginColumn, t);

                    }
				) 
				f2=factor()		{
									f1 = op.calculate(f1, f2);
								}
			)*
	{ return f1; }
}

int factor():
{ int i; }
{
	//<factor>::= (<expr>) | <num>
	<LPAR> i=expr() <RPAR>		{ return i; }
|	i=num()						{ return i; }
}

int num():
{	
	Token t;
}
{
	//<num> 	::= int
	t=<INTEGER> 	{
                        System.out.printf("@(%d,%d)\tINTEGER\t-\t%s\n", t.beginLine, t.beginColumn, t);
                       
						try{
							return Integer.parseInt(t.image);
						}catch (NumberFormatException e) {
							System.out.println("ERROR: Integer overflow.");
						}
					}
}
